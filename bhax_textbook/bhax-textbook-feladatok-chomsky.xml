<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/vajkone/prog1/blob/master/chomsky/turinggep.c">https://github.com/vajkone/prog1/blob/master/chomsky/turinggep.c</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            Nagyon részletesen az unáris számrendszert és a Turing gépet tárgyalni nem igazán lehet, ezért
            röviden: Az unáris (egyes) számrendszerben az N decimális számot N darab 1-essel vagy szimpla egyenes
            vonással (|) lehet ábrázolni. A Turing gép ezt úgy teszi meg, hogy az átváltandó számot beolvassa
            és addig vonogat ki belőle 1-et, amig az eredeti szám értéke 0 nem lesz. A kivont egyeseket
            pedig sorban a kimenetre (vagy tárolóba) irja. 
        </para> 
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Tutorom a megoldásban: Petrus Tamás József                
        </para>
        
      <para>
        <programlisting language="c">
          <![CDATA[


		    Szabályok:
        S -> aBSc
        S -> abc
        Ba -> aB
        Bb -> bb
        
        Levezetés:
        S -> aBSc -> aBaBScc -> aBaBabccc -> aaBBabccc -> aaBaBbccc -> aaaBBbccc -> ←-
        aaaBbbccc -> aaabbbccc
        

	  
           ]]>

        </programlisting>

       
      </para>

      <para>

        <programlisting language="c">
          <![CDATA[
      Szabályok:
      S -> abc
      S -> aXbc
      Xb -> bX
      Xc -> Ybcc
      bY -> Yb
      aY -> aaX
      aY -> aa
      
      Levezetés:
      S -> aXbc -> abXc -> abYbcc -> aYbbcc -> aaXbbcc -> aabXbcc -> aabbXcc -> ←-
      aabbYbccc -> aabYbbccc -> aaYbbbccc -> aaabbbccc    
	  
           ]]>

        </programlisting>
      </para>

      <para>
        A generálás során a meghatározott szabályok alapján a vizsgálandó szót lecseréljük a megadott részszóra,
        majd a kapott részszóból a szabályok alapján újabbat generálunk, ezt addig folytatjuk mig a nyil jobb
        oldalán csupa terminális változók nem állnak. 
        


      </para>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/vajkone/prog1/blob/master/chomsky/statements.txt">https://github.com/vajkone/prog1/blob/master/chomsky/statements.txt</link>
        </para>
     
        <para>
            
          A Backus-Naur-Form egyfajta metaszintaxis melynek segitségével különböző nyelveket, azok
          nyalvtanát irhatjuk le. Nevét John Backusról és Peter Naurról kapta. A módszert magát Backus 
          hozta létre és Peter Naur egyszerűsitette le. Eredetileg az ALGOL nyelv szintaxisánák leirására
          szolgált, de azóta a legtöbb programozási nyelv szintaxisának leirására ezt a módszert használják.
          
          
        </para>

     <para>
        <programlisting language="c">
          <![CDATA[


		for(int i=0;i<10;i++)
	  
           ]]>
          
        </programlisting>
          
      </para>
      <para>
        Az alábbi kódcsipet például gcc -std=c89 forditással nem fordul le, mert a for cikluson belül deklaráltuk az i változót. A konzolra kapunk
        is egy hiba üzenetet, hogy ezt csak C99 vagy C11 módban tehetjük meg.
      </para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/vajkone/prog1/blob/master/chomsky/szamokszama.l">https://github.com/vajkone/prog1/blob/master/chomsky/szamokszama.l</link> 
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
      <para>
            A lexer program segitségével könnyedén tudunk olyan input elemző programot késziteni, amely 
            megszámolja az inputban található számokat. A lexer egy szövegfjlból beolvassa a lexikális szabályokat,
            majd kimenetként C nyelvű kódot állit elő. 
             <programlisting language="c">
          <![CDATA[
          %{
	          #include <string.h>
	          int szamok_szama = 0;
          %}
          %%
           ]]>
          
        </programlisting>
          
          
      </para>
    <para>
      A kódon belül az egyes részeket %% (dupla százalék jel) választja el egymástól. Ebben a kódrészletben
      C nyelven inicializálunk egy változót ami majd a számokat számolja és tárolja és include-oljuk a 
      string.h header file-t. 
     
    </para>
    <para>
         <programlisting language="c">
          <![CDATA[
        [0-9]+		++szamok_szama;
        [a-zA-Z][a-zA-Z0-9]*	;                          
			
        %%
           ]]>
          
        </programlisting>
    
    Ezt követi a lexer rész, ahol a lexikális szabályokat adjuk meg, jelen esetben, hogy növelje a
    szamok_szamat ha a bemenet szám, és hagyja figyelmen kivül ha a bemenet bármilyen betű, de még
    akkor is ha a betű vagy betűk sorozata után áll egy szám, azaz csak akkor számol ha a bemenet számmal
    kezdődik. 
    
    </para>
       <para>
         <programlisting language="c">
          <![CDATA[
        int main()
        {
          yylex();
          printf("%d szam\n", szamok_szama);
          return 0;
        }
           ]]>
          
        </programlisting>
    
    Végül, ismét C nyelven, meghivjuk a main függvényt, amin belül pedig a yylex() függvényt is, ami a lexikális elemzőnk, amely
    értelmezi az előző blokkban definiált szabályokat. 
    
    </para>
    </section>                     

    <section>
        <title>l33t.l</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="https://github.com/vajkone/prog1/blob/master/chomsky/leet.l">https://github.com/vajkone/prog1/blob/master/chomsky/leet.l</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
      <para>
        Ahogy azt az előző lexeres programnál is láttuk a kód itt is 3 részre oszlik. Előre kerülnek a 
        header file-ok és egyéb definiciók, 2. blokkban jönnek a szabályok. Végül pedig a harmadik 
        blokkban parse-oljuk yylex()-el a szabályokat. 
      </para>

      <para>
        <programlisting language="c">
          <![CDATA[
        struct cipher {
        char c;
        char *pool[3];
  } l337d1c7 [] = {

  {'a', {"/\\", "Д", "@"}},
  {'b', {"8", "|3", "ß"}},
  {'c', {"(", "<", "©"}},
  .
  .
  .
           ]]>

        </programlisting>
        
      </para>
      <para>
        Készitünk egy cipher struktúrát mely tartalmaz egy karaktert, ami majd az egyes betűket fogja tartalmazni
        és egy 3 méretű tömböt azoknak a karaktereknek amikre majd lecseréljük az betűket. Ezután végigmegyünk
        az abc betűin és megadunk minden betűhoz három leet alternativát, ezzel létrehozva egy könyvtárat.
      </para>
      <para>

        <programlisting language="c">
          <![CDATA[
            
            int found = 0;
	  for(int i=0; i<L337SIZE; ++i)
	  {
	  
	    if(l337d1c7[i].c == tolower(*yytext))
	    {
	    
	      int r = 1+(int) (100.0*rand()/(RAND_MAX+1.0));
	    
          	if(r<34)
	        printf("%s", l337d1c7[i].pool[0]);
          	else if(r<67)
	        printf("%s", l337d1c7[i].pool[1]);
	      	else
	        printf("%s", l337d1c7[i].pool[2]);
	      	

	      found = 1;
	      break;
	   	 }
		}
		if(!found)
		printf("%c", *yytext);
           ]]>

        </programlisting>
        
      </para>
      <para>
        A második blokkban jöhetnek a szabályok, kezdve egy for ciklussal ami végigmegy a leetsize-on, 
        amit korábban definiáltunk (a leet könyvtárunk mérete osztva egy darab cipher tétel méretével).
        Majd azután egy random szám generátor segitségével döntjük el, hogy a három megadott leet alternativából
        melyiket is válassza, mindegyikre nagyjából 33% esély van. Ha pedig olyan karakterrel találkozik
        amit nem adtunk meg a könyvtárunkban akkor szimplán visszaadja az adott karaktert.
        
      </para>
      
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>            
            </listitem>
        </orderedlist>
        <para>
            Megoldás forrása:  
        </para>

        <para>
            Megoldás videó: 
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

       <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a; //egész tipusú változó]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a; //egész változóra mutató mutató]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a; //egész változó refernciája]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5]; //5 méretű tömb egészek számára]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c; //egészek tömbjének referenciája]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5]; //egészre mutató mutatók tömbje]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h (); //függvény ami egészekre mutató mutatót ad vissza]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) (); //mutató amely egészre mutató függvényre mutató mutatóra mutat]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b); //függvény ami ]]></programlisting>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            </listitem>            
        </itemizedlist>       


        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>                     


</chapter>                
