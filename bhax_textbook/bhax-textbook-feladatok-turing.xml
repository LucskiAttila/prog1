<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
  <section>
    <title>Végtelen ciklus</title>
    <para>
      Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely
      100 százalékban minden magot!
    </para>
    <para>

    </para>
    <para>
      <link xlink:href="https://github.com/vajkone/prog1/tree/master/batch1/feladat1">Megoldás forrása</link>
    </para>
    <para>

      100%-os mag használatot könnyen elérhetünk bármely egyszerű végtelen ciklussal, melynek végtelenségét
      az adja, hogy a ciklus futási feltételét úgy adjuk meg hogy az mindig igaz legyen. Erre számos megoldás
      létezik, pl: 
      <programlisting language="c"><![CDATA[
       int main(){

       while(1<2){;}

       return 0;
       }
       ]]>
    </programlisting>
    </para>
      <para>
        Ezzel az egyszerű programmal elérhetjük, hogy a programunk egy magot 100%-ban dolgoztasson meg.
        De mi van ha mi azt szeretnénk, hogy az összes magot 100%-ban használja ki? Nos, természetesen
        futtathatjuk a programot annyiszor ahány magunk van, vagy pedig segitségül hivhatjuk az OpenMP
        könyvtár szolgáltatásait.
        <programlisting language="c"><![CDATA[
        #include <stdio.h>
        #include <omp.h>

          int main(){

          #pragma omp parallel
          for(;;);
          return 0;
          }
          ]]>
        </programlisting>

        Ezt a kódot a gcc forditó -fopenmp kiegészitéssel ellátva forditjuk, majd futtatjuk.
        Ekkor láthatjuk, hogy az összes magunk (közel vagy ténylegesen) 100%-os terhelésen fut.
        

      </para>
        
      

    
    <para>
      
    </para>

  </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
      <para>

        Ha a program olyan programot kap bemenetként melyben van végtelen ciklus akkor akkor visszaad
        egy igaz értéket a T1000es programnak, ami ekkor boldogan leáll és kiirja, hogy igen itt bizony
        végtelen ciklus van. Ha viszont a vizsgált programban nincs végtelen ciklus akkor ő maga fog
        végtelen ciklusba kerülni. Ebből már rögtön érzékelhetjük, hogy mi is lesz a gond ha saját magát
        kell ilyen módon elemeznie.
      </para>
      <para>
        True: megáll, azaz végtelen ciklust talált, de ezekszerint nem áll le, de hogyha meg nem áll le,
        akkor pedig újabban ismét végtelen ciklust talál, tehát leáll - de ha leáll akkor mégsem végtelen?
        És igy tovább...
        Elsőre az embernek kicsit nehéz lehet ezt értelmezni, de a paradoxonokkal gyakran van ez igy.
        A lényeg, hogy ilyen programot lehetetlen irni.
      </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/vajkone/prog1/tree/master/feladatok/batch1/swap">https://github.com/vajkone/prog1/tree/master/feladatok/batch1/swap</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
      <para>
        A legegyszerűbb megoldás erre a problémára egy segédváltozó használata. Ezt a módszert szemléltetni
        úgy lehet a legkönyebb ha a változókra poharakként, a bennünk tárolt értékekre pedig int viz gondolunk.
        Hogyan tudjuk hát 2 teli pohár tartalmát egyikből a másikba önteni? Természetesen egy harmadik,
        üres pohár segitségével:

        <programlisting language="c">
        <![CDATA[
        int a=10;
        int b=7;
        int c;
        
        c=a; //c=10
        a=b; //a=7
        b=c; //b=10
            
        ]]>
      </programlisting>
        
        
         
      </para>

      <para>
        A dolgot természetesen matematikai szempontból is meg lehet közeliteni. Ha összeadjuk a két
        változót majd a kapott összegből kivonjuk a régi értéküket akkor megkapjuk hogy mi volt a másik
        változó értéke amit hozzáadtunk, azaz amivel cserélni akarjuk. Ez a gyakorlatban igy néz ki:

        <programlisting language = "c">
          <![CDATA[
                int a = 9;
                int b = 7;
                a = a+b; //a=18
                b = a-b; //b=9
                a = a-b; //a=7
            ]]>
        </programlisting>

        <para>
          Létezik ugyancsak egy másik megoldás amihez szintén kell matematikai logika viszont már közelebb
          áll az informatika szakterületéhez, ez pedig nem más mint a XOR azaz a kizáró vagy logikai művelet
          és az ezzel való csere.
          A számitógép az általunk deklarált voltozók (meg úgy minden szám) értékét 2-es számrendszerrű
          számként értelmezi és tárolja. Igy például az előző példában használt 7-es és 9-es igy néznének ki:
          7: 0111, 9: 1001. Most hogy ezt tisztáztuk érthetőbb lesz, ha aztmondjuk hogy a XOR művelet
          1-est ad vissza mindenhol az vagy az egyik vagy a másik szám bináris értékében 1-es szerepel,
          de nem mindkettőében. Ez a gyakorlatban igy néz ki:

          <programlisting language = "c">
            <![CDATA[
                int a = 7; //binárisan: 0111
                int b = 9; //binárisan: 1001
                a = a^b; //a= 0111 ^ 1001 = 1110
                b = a^b; //b= 1110 ^ 1001 = 0111
                a = a^b; //a= 1110 ^ 0111 = 1001
            ]]>
          </programlisting>



        </para>

      </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... 
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>

</chapter>                
