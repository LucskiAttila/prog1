<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban az módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... térj ki arra is, hogy a JDK forrásaiban a Sun programozói
            pont úgy csinálták meg ahogyan te is, azaz az OO nemhogy nem nehéz, hanem éppen természetes neked!
        </para>
      <para>
        <programlisting language = "c">
          <![CDATA[
                
                class Random {

	                public:
		                Random();
		                ~Random(){} 
		                double get(); 

	                private:
		                bool exist; 
		                double value; 

                };

                
            ]]>
        </programlisting>
        
        Létrehozzuk a Random nevű osztályt, melynek elemeit két részre osztjuk: publikus, azaz a class-on
        kivűl is láthatóak/elérhetőek, valamint privát, mely elemeknek elérése a classon belülre korlátozódik.
        A public részben létrehozunk egy kontstruktort és egy destruktort. Nevükből értelemszerűen adódik,
        hogy az egyik az objektumok létrehozását végzi, másik pedig az eltakaritásukat. A get fügvényünk-kel
        pedig lekérjük, hogy mit is generáltunk. Privát állományunkba kerül egy bool ami vizsgálja, hogy van-e
        már korábbi ilyen érték, amit pedig a value-ban tárolunk.
        

      </para>
      <para>
        <programlisting language = "c">
          <![CDATA[
                
              double Random::get() { 
	            if (!exist)
	            {
		            double u1, u2, v1, v2, w;
	
		            do{

			            u1 = std::rand () / (RAND_MAX + 10.0); 
			            u2 = std::rand () / (RAND_MAX + 1.0);
			            v1 = 2 * u1 - 1;
			            v2 = 2 * u2 - 1;
			            w = v1 * v1 + v2 * v2;
		                }
		            while (w > 1);

		            double r = std::sqrt ((-2 * std::log (w)) / w);

		            value = r * v2; 
		            exist = !exist;
		            return r * v1; 
	            }
	
	            else
	            {	
		            return value;
		            exist = !exist;
	            }
            };    
  
                
            ]]>
        </programlisting>
        
        Az algoritmus 2 random számot generál, az egyiket eltárolja a value-ban, a másikat pedig visszaadja
        a get() függvény. A value-ban lévőt akkor adja vissza, ha az exist igaz, magyarul már van korábbi
        random érték.
        
      </para>
      <para>
        <programlisting language = "c">
          <![CDATA[
                
           int main() 
            {
	            Random rnd;

	            for (int i = 0; i < 10; ++i) 
		            std::cout << rnd.get() << std::endl; 


            }
                
            ]]>
        </programlisting>
        Végül generálunk 10 darab random számot. 
        
        
      </para>

      <para>
        Ugyanez Javaban:

        <programlisting language = "c">
          <![CDATA[
                
  public class PolarGen	{

  public final  static int RAND_MAX = 32767;
  private static boolean bExists;
  private double dValue;
  static Random cRandomGenerator = new Random();
  

  public PolarGen() { 
	bExists = false;
	cRandomGenerator.setSeed(20);
  };
  
  public double PolarGet()	{
    	if (!bExists)
  {
		double u1, u2, v1, v2, w;

		do{
			u1 = cRandomGenerator.nextInt (RAND_MAX) / (RAND_MAX + 1.0);
			u2 = cRandomGenerator.nextInt (RAND_MAX) / (RAND_MAX + 1.0);
			v1 = 2 * u1 - 1;
			v2 = 2 * u2 - 1;
			w = v1 * v1 + v2 * v2;
		    }
		while (w > 1);

		double r = Math.sqrt ((-2 * Math.log (w)) / w);

		dValue = r * v2; 
		bExists = !bExists;

		return r * v1; 
	}
	
	else
	{
		bExists = !bExists; 
		return dValue;
	}
  };    
  
  public static void main(String args[])	{
    PolarGen cPolarGen = new PolarGen();
    double  dEredmeny = cPolarGen.PolarGet();
    System.out.println(dEredmeny);
  }
  
}
                
            ]]>
        </programlisting>
        
        Annyi változás van (a nyelvspecifikus szintaktikát leszámitva), hogy itt minden a PolarGen osztályon
        belűlre kerül, még a main függvényünk is. 
        
      </para>
    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
      <para>
        Kis történelmi kitekintés: Lempel–Ziv–Welch, azaz LZW egy univerzális adatvesztés nélkül járó
        tömöritési eljárás, melyet Abraham Lempel, Jacob Ziv és Terry Welch készitett. Az algoritmus közkedvelt
        egyszerű  implementálhatóságának hála. A Unix rendszerek file-ok tömöritése esetén (compress) valamint
        a GIF képfájlok is ezt az algoritmust használják, de mára a PNG már képformátum már elterjedtebb.

      </para>
      <para>
        <programlisting language = "c">
          <![CDATA[
        typedef struct binfa
        {
        int ertek;
        struct binfa *bal_nulla;
        struct binfa *jobb_egy;

        }  BINFA, *BINFA_PTR;
         ]]>
</programlisting>
        Először is elkészitünk egy binfa struktúrát, amiben három dolgot definiálunk, az egyik egy int
        változó, az érték, a másik kettő pedig (a fa szerkezet miatt) a gyerekeire mutató mutatók (jobb és bal gyerek).

        <programlisting language = "c">
          <![CDATA[
       BINFA_PTR
        uj_elem ()
        {
          BINFA_PTR p;

          if ((p = (BINFA_PTR) malloc (sizeof (BINFA))) == NULL)
            {
              perror ("memoria");
              exit (EXIT_FAILURE);
            }
          return p;
        }
         ]]>
        </programlisting>
        Ez a funkció fog tárhelyet foglalni az új elemek számára a memóriában, majd vissza is
        adja a lefoglalt területre mutató pointert. Hogyha elfogyna a memória
        akkor hibát dob a program és leáll.

        <programlisting language = "c">
          <![CDATA[
       
       
        int main (int argc, char **argv)
        {
          char b;

          BINFA_PTR gyoker = uj_elem ();
          gyoker->ertek = '/';
          BINFA_PTR fa = gyoker;

         ]]>
        </programlisting>



        A main függvényünk elején létrehozunk egy karakter változót amibe majd a beovlasott karaktereket
        fogjuk tárolni, továbbá léterhozzuk a gyökér értékét, ami most a / jel lesz, majd a fa mutatót
        beállitjuk, hogy a gyoker-re mutasson.

        <programlisting language = "c">
          <![CDATA[

        while (read (0, (void *) &b, 1))
        {
          write (1, &b, 1);
          if (b == '0')
          {
          if (fa->bal_nulla == NULL)
            {
              fa->bal_nulla = uj_elem ();
              fa->bal_nulla->ertek = 0;
              fa->bal_nulla->bal_nulla = fa->bal_nulla->jobb_egy = NULL;
              fa = gyoker;
            }
          else
          {
            fa = fa->bal_nulla;
          }
        }
        else
        {
          if (fa->jobb_egy == NULL)
          {
            fa->jobb_egy = uj_elem ();
            fa->jobb_egy->ertek = 1;
            fa->jobb_egy->bal_nulla = fa->jobb_egy->jobb_egy = NULL;
            fa = gyoker;
          }
        else
        {
          fa = fa->jobb_egy;
        }
          }
        }

         ]]>
      </programlisting>
        
        Itt jön az input beolvasása (standard inputról (0), b bufferba, 1 byte-ot (azaz 1 karaktert egyszerre).
        Majd megvizsgáljuk, hogy a kapott karakter
        1-es vagy 0-ás-e és annak megfelelően megvizsgáljuk megint, hogy ahova a fa mutató mutat (első futásnál
        ez ügye mindig a gyökér) elemnek az adott gyereke üres-e. Ha igen, akkor létrehozunk egy 
        új elemet az uj_elem() fügvénnyel, értékét beállitjuk a megfelelőre(0-ás vagy 1-es) és megmondjuk
        hogy ennek az új elemnek még nincsenek gyerekei, tehát beállitjuk őket NULL-ra. Ezután a fa
        mutatót visszaállitjuk a gyökérre. Ha viszont a vizsgált gyerek nem üres, tehát már áll ott 1-es vagy 
        0-ás, akkor a fa mutatóval rálépünk arra a gyerekre amit éppen beolvastunk
        és várjuk a következő vizsgálandó karaktert, hogy legközelebb már ennek a gyereknek a gyerekeit
        vizsgálhassuk ugyanezzel a módszerrel. 
        

      </para>
      <para>
        Végül jöhet a kiiratás és a memória felszabaditás:
        <programlisting language = "c">
          <![CDATA[
          
            printf ("\n");
            kiir (gyoker);
            extern int max_melyseg;
            printf ("melyseg=%d", max_melyseg);
            szabadit (gyoker);
          }

          static int melyseg = 0;
          int max_melyseg = 0;

          void
          kiir (BINFA_PTR elem)
          {
            if (elem != NULL)
              {
                ++melyseg;
                if (melyseg > max_melyseg)
	          max_melyseg = melyseg;
                kiir (elem->jobb_egy);
                for (int i = 0; i < melyseg; ++i)
	          printf ("---");
                printf ("%c(%d)\n", elem->ertek < 2 ? '0' + elem->ertek : elem->ertek,
	                melyseg);
                kiir (elem->bal_nulla);
                --melyseg;
              }
          }

          void
          szabadit (BINFA_PTR elem)
          {
            if (elem != NULL)
              {
                szabadit (elem->jobb_egy);
                szabadit (elem->bal_nulla);
                free (elem);
              }
          }
 ]]>
</programlisting>
          
        A szabadit függvényt talán nem kell túltárgyalni, rekurzivan törli az elemeket a memóriából 
        a gyökértől kezdve. 
        A kiir függvény már kicsit trükkösebb: itt történik a fa-struktúra kialakitása és annak
        a standard outputra való kiirása. Először is rekurzivan
        bejárjuk a jobb oldali gyereket (meghivjuk rá is a kiir függvényt), majd feldolgozzuk a for cikluson
        belül a gyökeret, ezután ismét rekurzivan bejárjuk a bal oldali gyermeket. Ezt a bejárást hivjuk
        inorder bejárásnak.
        
      </para>
      
    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
      <para>
        Az előző feladatban tárgyalt binfa tökéletesen megfelel számunkra ebben a feladatban is, az egyetlen
        rész amelyen módositani fogunk az a kiir függvényben lesz. Eddig ügye a kiir függvény inorder
        bejárást végzett a fán, ami azt jelenti, hogy előbb a jobboldali gyermeket járjuk be,
        aztán a gyökeret dolgozza fel, majd
        a baloldali gyereket járja be ( mindezt rekurzivan). A preordernél előbb feldolgozzuk a gyökeret, majd bejárjuk
        előbb a bal majd a jobb oldali gyereket. A postorderben pedig a gyökeret dolgozzuk fel utoljára.
        Nézzük is hogyan néz ki a postorder bejárás: 

        <programlisting language = "c">
          <![CDATA[
          
          void kiir(BINFA_PTR elem)
          {

           if (elem !=NULL)
            {
             ++melyseg
             if (melyseg>max_melyseg) 
              max melyseg = melyseg;
             kiir(elem->jobb_egy);
             kiir(elem->bal_nulla);
             for (int i=0; i<melyseg;i++)
              printf("---");
             printf("%c(%d)\n",elem->ertek<2 ? '0' + elem->ertek : elem->ertek, melyseg-1);
             --melyseg
            }

          }
          

          ]]>
        </programlisting>

        Látható, hogy most a for ciklus amelyben a paraméterként kapott elemet (a gyökeret) feldolgozzuk
        a két rekurziv hivás utánra került, igy előbb bejárjuk a jobb oldali gyermekeit a fának, majd a
        bal oldalit és csak aztán dolgozzuk fel a gyökeret. A preorder bejárás ennek az ellentéte, előbb
        feldolgozzuk a gyökeret és csak aztán a gyerekeit:

        <programlisting language = "c">
          <![CDATA[
          
          void kiir(BINFA_PTR elem)
          {

           if (elem !=NULL)
            {
             ++melyseg
             if (melyseg>max_melyseg) 
              max melyseg = melyseg;
              for (int i=0; i<melyseg;i++)
              printf("---");
             printf("%c(%d)\n",elem->ertek<2 ? '0' + elem->ertek : elem->ertek, melyseg-1);
             kiir(elem->jobb_egy);
             kiir(elem->bal_nulla);
             
             --melyseg
            }

          }
          

          ]]>
        </programlisting>
          
      </para>
    </section>        
                        
    <section>
        <title>Tag a gyökér</title>
        <para>
            Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node
            osztálya. A gyökér csomópont legyen kompozícióban a fával!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://progpater.blog.hu/2011/03/31/imadni_fogjatok_a_c_t_egy_emberkent_tiszta_szivbol">https://progpater.blog.hu/2011/03/31/imadni_fogjatok_a_c_t_egy_emberkent_tiszta_szivbol</link>              
        </para>
      <para>
        Kezdjük is azzal, hogy a C struktúránkat egy class-á, azaz osztállyá varázsoljuk. 
        <programlisting language = "c">
          <![CDATA[
        class LZWBinFa
        {
        public:
        LZWBinFa (char b = '/'):betu (b), balNulla (NULL), jobbEgy (NULL) {};
        ~LZWBinFa () {};
        
         ]]>
      </programlisting>
        Nézzük hogyan tovább. 
        <programlisting language = "c">
          <![CDATA[


    void operator<<(char b)
    {
        if (b == '0')
        {
            // van '0'-s gyermeke az aktuális csomópontnak?
            if (!fa->nullasGyermek ()) // ha nincs, csinálunk
            {
                Csomopont *uj = new Csomopont ('0');
                fa->ujNullasGyermek (uj);
                fa = &gyoker;
            }
            else // ha van, arra lépünk
            {
                fa = fa->nullasGyermek ();
            }
        }
        else
        {
            if (!fa->egyesGyermek ())
            {
                Csomopont *uj = new Csomopont ('1');
                fa->ujEgyesGyermek (uj);
                fa = &gyoker;
            }
            else
            {
                fa = fa->egyesGyermek ();
            }
        }
    }
    
         ]]>
        </programlisting>
        Nézzük mi is történik itt. Ez a kódrészlet már ismerős a program C váltzatából, 
        itt vizsgálta a programunk, hogy 0-ást vagy 1-est kapott-e, és cselekedett utána annak megfelelően.
        Itt ugyanez történik csak egy kis módositással. Az <function><![CDATA[operator<<]]></function> segitségével
        ugynevezett shiftelést hajtunk végre. Ezzel a funkcióval a bemenetként kapott elemeket rögtön belerakjuk a fa 
        struktúránkba, de ez majd a végén a main függvénynél lesz látványos és fog értelmet nyerni.
        A csomopontból új osztályt készitettünk, melyből példányositani a new szócskával tudunk. Vessünk is
        egy pillantást a csomópont osztályra, melyet az LZWBinFa osztályon belül hoztunk létre:
        <programlisting language = "c">
          <![CDATA[


   private:

    class Csomopont
    {
    public:
        Csomopont (char b = '/'):betu (b), balNulla (0), jobbEgy (0) {};
        ~Csomopont () {};
        Csomopont *nullasGyermek () {
            return balNulla;
        }
        Csomopont *egyesGyermek ()
        {
            return jobbEgy;
        }
        void ujNullasGyermek (Csomopont * gy)
        {
            balNulla = gy;
        }
        void ujEgyesGyermek (Csomopont * gy)
        {
            jobbEgy = gy;
        }
    private:
        friend class LZWBinFa;
        char betu;
        Csomopont *balNulla;
        Csomopont *jobbEgy;
        Csomopont (const Csomopont &);
        Csomopont & operator=(const Csomopont &);
    }; 
    
         ]]>
        </programlisting>
        A Csomopont alapértelmezett kunstroktorában a csomópont értékét q '/'-re állitjuk, bal és jobb
        gyerekének pedig NULL NULL értéket adunk. A nullasGyermek és egyesGyermek függvények, melyek
        a bal és jobb gyerekre mutató mutatót fognak visszaadni. Az ujEgyesGyermek és ujNullasGyermek
        pedig a jobb és bal gyermek mutatóját állitja a paraméterként átadott csomópontokra.
        Mostmár értelmet nyer az egyel fentebbi kódrészlet is, hogy a

<programlisting language = "c">
          <![CDATA[
        if (b == '0')
        {
        if (fa->bal_nulla == NULL)
        {
        fa->bal_nulla = uj_elem ();
        fa->bal_nulla->ertek = 0;
        fa->bal_nulla->bal_nulla = fa->bal_nulla->jobb_egy = NULL;
        fa = gyoker;
        }
  ]]>
      </programlisting>
        kódból, hogyan lett:
        <programlisting language = "c">
          <![CDATA[
          if (b == '0')
            {
            
            if (!fa->nullasGyermek ()) 
            {
                Csomopont *uj = new Csomopont ('0');
                fa->ujNullasGyermek (uj);
                fa = &gyoker;
            }
          
          
          ]]>
        </programlisting>
        
      </para>
      <para>
        Vessünk hát egy pillantást a main függvényünkre, ahol igazából már csak a beolvasás zajlik
        egy while ciklussal:
        <programlisting language = "c">
          <![CDATA[

        
       int main ()
        {
        char b;
        LZWBinFa binFa;

        while (std::cin >> b)
        {
        binFa << b;
        }

    binFa.kiir ();
    binFa.szabadit ();

    return 0;
    }
       ]]>
  </programlisting>
        Tehát létrehozzuk egy LZWBinFa példányt melyet elnevezünk binFa-nak, majd amig van bemenet addig
        azt szépen pakoljuk is bele egyenes a binFa-ba. Ezért volt szükségünk az <function><![CDATA[operator<<]]></function>
        túltöltésére, azaz valamelyest újradefiniálására, hogy ezt megtehessük. Ez természetesen nem a mi
        alkotásunk, a shiftelés egy alapból létező dolog, mi csak megmondtuk, hogy számunkra hogyan is lenne
        megfelelő a működése jelen esetben. 
        
      </para>
    </section>        
                
    <section>
        <title>Mutató a gyökér</title>
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a 
            fával!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
    </section>                     

    <section>
        <title>Mozgató szemantika</title>
        <para>
            Írj az előző programhoz mozgató konstruktort és értékadást, a mozgató konstruktor legyen a mozgató
            értékadásra alapozva!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
    </section>                     

</chapter>                
