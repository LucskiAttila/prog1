<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

  <section>
    <title>Encoding</title>
    <para>
      
      A feladat az volt, hogy a MandelbrotHalmazNagyító.java állományt fordítsuk és futtassuk, úgy hogy a fájl nevekben és
      a forrásban is meghagyjuk az ékezetes betűket. Persze, a feladat nevéből lehetett tudni, hogy a karakterkészlettel kell
      majd valamit ügyeskedni, hogy ez a dolog működjön, de előbb azért tettem egy próbát a MandelbrotHalmaz.java lefordítására
      hogy lássuk is mivel állunk szemben.
      
      <figure>
      <title>Encoding error</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../Prog2Chomsky/encoding_error.png" format="PNG" scale="70"/>
        </imageobject>
      </mediaobject>
    </figure>
      
      Láthatjuk, hogy az alapvető UTF-8-as kódolást használva számos karakter unmappable, azaz - szó szerinti fordításban -
      feltérképezhetetlen. 
      
    </para>

    <para>

      Így hát mint minden valamire való programozó, én is a Google-ön kezdtem el keresni a megoldást és rövid keresgélés után
      az <link xlink:href="https://docs.oracle.com/javase/9/intl/supported-encodings.htm">Oracle doksik encodingra vonatkozó oldalán</link> lyukadtam ki,
      hogy megtudjam, a speciális magyar ékezetes betűket tartalmazó java állományokat hogyan is tudnám lefordítani. Leírásokban konkrétan
      a magyar nem volt megnevezve, csak egy gyűjtő amibe a magyar nyelv is beletartozik, mégpedig az Eastern European, amihez
      a megadott IANA encoding a windows-1250 volt. Hogy megbizonyosodjam, hogy jó nyomon járok, azért még egy másik oldalt is
      szerettem volt keresni, ahol esetleg konkrétan említik, hogy a magyar betűkészlet ténylegesen fordítható ezzel az encodinggal és szerencsére
      rövid időn belül találtam is: <link xlink:href="https://scratchpad.fandom.com/wiki/Character_Encoding_Recommendation_for_Languages">https://scratchpad.fandom.com/wiki/Character_Encoding_Recommendation_for_Languages</link>

      Ahol konrkétan leríják, hogy melyik nyelv betűkészlete melyik IANA encodinghoz tartozik:

      <figure>
        <title>Character Encoding Recommendation for Languages</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../Prog2Chomsky/windowsencoding1250.png" format="PNG" scale="70"/>
          </imageobject>
        </mediaobject>
      </figure>
      
      

    </para>

    <para>
      Ezután nem maradt hát más hátra, mint használni az ajánlott kódolást, amit az -encoding flaggel tudunk megadni:

      <figure>
        <title>Így már lefordul</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../Prog2Chomsky/encoding_lefordul.png" format="PNG" scale="55"/>
          </imageobject>
        </mediaobject>
      </figure>

      De a feladat a nagyító fordítását és futtatását kérte, amihez pedig először a MandelbrotIterációk-at kellett előbb fordítani:

      <figure>
        <title>A nagyító is lefordul és fut</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../Prog2Chomsky/nagyitois.png" format="PNG" scale="55"/>
          </imageobject>
        </mediaobject>
      </figure>

      És a nagyítás is kiválóan működik:

      <figure>
        <title>Nagyítás</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../Prog2Chomsky/nagyitas.png" format="PNG" scale="55"/>
          </imageobject>
        </mediaobject>
      </figure>
      
      
      
      
    </para>

  </section>


  <section>
    <title>OOCWC lexer</title>
    
    <para>
      
      A feladat szerint vázolni kellett a <link xlink:href="https://github.com/nbatfai/robocar-emulator/blob/master/justine/rcemu/src/carlexer.ll">https://github.com/nbatfai/robocar-emulator/blob/master/justine/rcemu/src/carlexer.ll</link>
      lexert és kapcsolatát. Az OOCWC a Robocar World Championship rövidítése, melynek lényege, hogy autókat láthatunk mozogni Debrecen
      térképén. Maga a projekt is érdekes, de számunkra azért fontos mert a lexikális egységeket tanulmányozhatjuk, noha nem egy
      programnyelv részeként, hanem saját, magunk által megírt egységekről lesz szó. Maga a kód így néz ki:
      
      <programlisting language = "C++">
          <![CDATA[ 
          
%option c++
%option noyywrap

%{
#define YY_DECL int justine::robocar::CarLexer::yylex()
#include "carlexer.hpp"
#include <cstdio>
#include <limits>
%}
          
INIT	"<init"
INITG	"<init guided"
WS	[ \t]*
WORD	[^-:\n \t()]{2,}
INT	[0123456789]+
FLOAT	[-.0123456789]+
ROUTE	"<route"
CAR	"<car"
POS	"<pos"
GANGSTERS	"<gangsters"
STAT	"<stat"
DISP	"<disp>"
%% 
{DISP}					{
					  m_cmd = 0;
					}
{POS}{WS}{INT}{WS}{INT}{WS}{INT}	{
					  std::sscanf(yytext, "<pos %d %u %u", &m_id, &from, &to);
					  m_cmd = 10001;
					}
{CAR}{WS}{INT}				{
					  std::sscanf(yytext, "<car %d", &m_id);
					  m_cmd = 1001;
					}
{STAT}{WS}{INT}				{
					  std::sscanf(yytext, "<stat %d", &m_id);
					  m_cmd = 1003;
					}
{GANGSTERS}{WS}{INT}			{
					  std::sscanf(yytext, "<gangsters %d", &m_id);
					  m_cmd = 1002;
					}
{ROUTE}{WS}{INT}{WS}{INT}({WS}{INT})*	{
				  int size{0};
				  int ss{0};
				  int sn{0};				  
				  
				  std::sscanf(yytext, "<route %d %d%n", &size, &m_id, &sn);
				  ss += sn;
				  for(int i{0}; i<size; ++i)
				  {
				    unsigned int u{0u};
				    std::sscanf(yytext+ss, "%u%n", &u, &sn);
				    route.push_back(u);
				    ss += sn; 				    
				  }
				  m_cmd = 101;
				}
{INIT}{WS}{WORD}{WS}("c"|"g")	{
				  std::sscanf(yytext, "<init %s %c>", name, &role);
				  num = 1;
				  m_cmd = 0;
				}
{INIT}{WS}{WORD}{WS}{INT}{WS}("c"|"g")	{
				  std::sscanf(yytext, "<init %s %d %c>", name, &num, &role);
				  if(num >200)
				  {
				    m_errnumber = 1;
				    num = 200;
				  }
				  m_cmd = 1;
				}				
{INITG}{WS}{WORD}{WS}("c"|"g")	{
				  std::sscanf(yytext, "<init guided %s %c>", name, &role);
				  num = 1;
				  m_guided = true;
				  m_cmd = 3;
				}
{INITG}{WS}{WORD}{WS}{INT}{WS}("c"|"g")	{				  
				  std::sscanf(yytext, "<init guided %s %d %c>", name, &num, &role);
				  if(num >200)
				  {
				    m_errnumber = 1;
				    num = 200;
				  }
				  m_guided = true;
				  m_cmd = 2;
				}								
.				{;}
%%

int yyFlexLexer::yylex(){return -1;}            
          
          
           ]]>
        </programlisting>

      A lényeg, hogy ha a beolvasott stringekben előfordul valamelyik a fent felsorolt kifejezésekben, akkor az azoknak megfelelő
      kód fog lefutni. A kifejezések az elején vannak definiálta, például a {WS} a whitespace karakter, amely után a csillag, tehát a [ \t]*
      azt jelenti, hogy bármennyiszer előfordulhat, az INT [0123456789]+ után a + jel pedig azt jelenti, hogy felsorolt számok bármennyiszer és
      legalább egyszer előfordulhatnak. 

    </para>

  </section>


  <section>
    <title>l334d1c45</title>
    <para>
      
      A l33t nyelvről már volt szó korábban, most Javaban ismét elővesszük és OO környezetben is dolgozunk vele egy kicsit. 
      Ha már elfelejtettük volna akkor, a leet nyelv egy internetes nyelv vagy ábécé amely különböző ASCII karakterekre cseréli
      a hagyományos Latin betűket. Maga a szó az elite, azaz az elit szóból ered, amely vonatkozhatott arra, hogy aki megérti ezt
      a cifra nyelvet az az internet elitjébe tartozott. 
      
    </para>

    <para>

      A megoldásom a feladatra a következő:


      <programlisting language = "Java">
          <![CDATA[ 
          
          import java.util.Scanner;



public class Leet {

    private static StringBuilder transform(String input, StringBuilder sb)
    {

        input=input.toUpperCase();
        for(int i=0;i<input.length();i++)
        {
            switch (input.charAt(i)) {
                case 'A' : sb.append("4");
                    break;
                case 'B' : sb.append("|3");
                    break;
                case 'C' : sb.append("(");
                    break;
                case 'D' : sb.append("|)");
                    break;
                case 'E' : sb.append("3");
                    break;
                case 'F' : sb.append("|=");
                    break;
                case 'G' : sb.append("6");
                    break;
                case 'H' : sb.append("|-|");
                    break;
                case 'I' : sb.append("|");
                    break;
                case 'J' : sb.append(".]");
                    break;
                case 'K' : sb.append("|<");
                    break;
                case 'L' : sb.append("1");
                    break;
                case 'M' : sb.append("|Y|");
                    break;
                case 'N' : sb.append("/V");
                    break;
                case 'O' : sb.append("Ø");
                    break;
                case 'P' : sb.append("|O");
                    break;
                case 'Q' : sb.append("(,)");
                    break;
                case 'R' : sb.append("®");
                    break;
                case 'S' : sb.append("§");
                    break;
                case 'T' : sb.append("7");
                    break;
                case 'U' : sb.append("|_|");
                    break;
                case 'V' : sb.append("V");
                    break;
                case 'W' : sb.append("\\^/");
                    break;
                case 'X' : sb.append(" }{");
                    break;
                case 'Y' : sb.append("¥");
                    break;
                case 'Z' : sb.append("2");
                    break;
                case ' ' : sb.append(" ");
                    break;
                    default: sb.append(input.charAt(i));
            }


        }

        return sb;
    }

    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder();
        Scanner scan = new Scanner(System.in);
        String input;

        System.out.println("Please enter the text that you want to l33tify");
        input=scan.nextLine();
        System.out.println("The 1337 version of your input is: \n");

        sb=transform(input,sb);

        System.out.print(sb);
        System.out.println("\n");

        }

    }

          
          
          
          ]]>
        </programlisting>
      
      Kicsit egyszerűsítve, az ábécé poolokat és a randomizálást kihagyva, most egy betűnek csak egy leet megfelelője lesz. A program
      egy text inputot kér a felhasználótól, aminek minden karakterét sorra nézi és az annak megfelelő leet karaktert egy stringbuilder
      hozzáfűzi a l33t szóhoz. 
      
      <figure>
      <title>Leetify</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../Prog2Chomsky/leet.png" format="PNG" scale="80"/>
        </imageobject>
      </mediaobject>
    </figure>
      
      
    </para>

  </section>


  <section>
    <title>Paszigráfia Rapszódia OpenGL full screen vizualizáció</title>
    <para>
    </para>

  </section>


  <section>
    <title>Paszigráfia Rapszódia LuaLaTeX vizualizáció</title>
    <para>
    </para>

  </section>


  <section>
    <title>Perceptron osztály</title>
    <para>
    </para>

  </section>

        

</chapter>                
